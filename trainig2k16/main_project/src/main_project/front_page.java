/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package main_project;
//import java.awt.*;
//import java.awt.event.*;

import java.awt.Color;
import java.io.*;
//import java.io.BufferedInputStream;
//import java.io.BufferedWriter;
//import java.io.File;
//import java.io.FileInputStream;
//import java.io.FileWriter;
//import java.io.IOException;
//import java.sql.Connection;
//import java.sql.DriverManager;
//import java.sql.PreparedStatement;
//import java.sql.ResultSet;
//import java.sql.ResultSetMetaData;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;
//import java.util.Calendar;
import java.util.concurrent.TimeUnit;
import javax.swing.*;
//import javax.swing.BorderFactory;
//import javax.swing.DefaultListModel;
//import javax.swing.JFileChooser;
//import javax.swing.JFrame;
//import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;

//import java.io.BufferedWriter;
//import java.io.File;
//import java.io.FileWriter;
//import java.io.IOException;

import javax.swing.*;
import javax.swing.border.Border;
/**
 *
 * @author SMART
 */
public class front_page extends javax.swing.JFrame {

     // Creates new form front_page
     
     boolean flag=false;
    static String mem_value[] = new String[65536];
    char[] keyword = {'A', 'B', 'C', 'D', 'E', 'H', 'L', 'M'};
    static String reg[] = new String[8];
    String store_sp, store_pc, mem_addrs, mem_content;//,port_addrs,port_content;
    static int carry;
    static int sign;
    static int parity;
    static int zero;
    static int ac;
    static int flag1 = 0;
    String psw = "00";
    String instr[] = new String[3];
    String flagreg;
    String memadrs;
    int build = 0;
     static int u;
   static int save1=0,save2=0;
    String labels[];
     boolean exec_flag[];
     static int l=0;
     static String label_arg="";

    public void setText_lines(String[] text_lines) {
        this.text_lines = text_lines;
    }

    @Override
    public void setTitle(String title) {
        super.setTitle(title);
    }
    
    String[] text_lines;

    public front_page() {
        initComponents();
        intialise_to_zero();
        display();
        loadlist();
        cmmd();
        this.setLocationRelativeTo(null);
        //this.setContentPane();
        this.setTitle("VIRTUAL 8085");
        this.setExtendedState(MAXIMIZED_BOTH);
        //this.setState(NORMAL);
        txt_workspace.setBorder(BorderFactory.createTitledBorder("WORKSPACE"));
        //txt_workspace.setSize(475, 400);
        //txt_remarks.setSize(475, 155);
        txt_remarks.setBorder(BorderFactory.createTitledBorder("MESSAGE WINDOW"));
        jPanel1.setBorder(BorderFactory.createTitledBorder("GPRS"));
        jPanel3.setBorder(BorderFactory.createTitledBorder("FLAG REGISTER"));
        jPanel2.setBorder(BorderFactory.createTitledBorder("MEMORY INITIALIZATION"));
        jPanel4.setBorder(BorderFactory.createTitledBorder("COMMAND HISTORY"));
        jTextField_acc.setEditable(false);
        jTextField_b.setEditable(false);
        jTextField_C.setEditable(false);
        jTextField_D.setEditable(false);
        jTextField_E.setEditable(false);
        jTextField_H.setEditable(false);
        jTextField_L.setEditable(false);
        jTextField_CARRY.setEditable(false);
        jTextField_SIGN.setEditable(false);
        jTextField_AC.setEditable(false);
        jTextField1_ZERO.setEditable(false);
        jTextField_parity.setEditable(false);
        jTextField_SP.setEditable(false);
        jTextField_PC.setEditable(false);
        jTextField1_FLAG.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_workspace = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txt_remarks = new javax.swing.JTextArea();
        jLabel19 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton_EDIT = new javax.swing.JButton();
        jTextField_SP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField_L = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField_D = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField_acc = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField_E = new javax.swing.JTextField();
        jTextField_PC = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton_SAVE = new javax.swing.JButton();
        jTextField_C = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField_b = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField_H = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField_VALUE = new javax.swing.JTextField();
        jButton_INSERT = new javax.swing.JButton();
        jTextField_MEM_ADRS = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jTextField1_FLAG = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField_AC = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTextField_SIGN = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField_CARRY = new javax.swing.JTextField();
        jTextField1_ZERO = new javax.swing.JTextField();
        jTextField_parity = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem_quit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(6);

        jToolBar1.setRollover(true);

        txt_workspace.setColumns(20);
        txt_workspace.setRows(5);
        jScrollPane2.setViewportView(txt_workspace);

        txt_remarks.setColumns(20);
        txt_remarks.setRows(5);
        jScrollPane3.setViewportView(txt_remarks);

        jButton_EDIT.setText("Edit registers");
        jButton_EDIT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EDITActionPerformed(evt);
            }
        });

        jLabel2.setText("B");

        jLabel3.setText("C");

        jLabel9.setText("PC");

        jLabel7.setText("L");

        jLabel4.setText("D");

        jLabel6.setText("H");

        jLabel5.setText("E");

        jButton_SAVE.setText("Save ");
        jButton_SAVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_SAVEActionPerformed(evt);
            }
        });

        jLabel8.setText("SP");

        jLabel1.setText("A");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField_SP, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField_PC, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField_H, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField_b))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField_D, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField_L, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField_E, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField_C, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jTextField_acc, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton_EDIT)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_SAVE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextField_C, jTextField_D, jTextField_E, jTextField_H, jTextField_L, jTextField_b});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_SAVE)
                    .addComponent(jButton_EDIT))
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jTextField_acc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField_b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_C, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_D, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_E, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_H, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField_L, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField_SP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField_PC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jTextField_C, jTextField_D, jTextField_E, jTextField_H, jTextField_L, jTextField_acc, jTextField_b});

        jLabel10.setText("Memory address(hex):");

        jLabel11.setText("value:");

        jButton_INSERT.setText("INSERT");
        jButton_INSERT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_INSERTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_MEM_ADRS)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton_INSERT, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)))
                .addComponent(jTextField_VALUE, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField_MEM_ADRS, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(jLabel11)
                        .addComponent(jTextField_VALUE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jButton_INSERT, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jLabel15.setText("ACF");

        jLabel17.setText("  FLAG");

        jLabel12.setText("CF");

        jLabel14.setText("ZF");

        jLabel13.setText("SF");

        jLabel16.setText("PF");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel17)
                .addGap(56, 56, 56))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel14)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12)
                            .addComponent(jLabel16))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_parity, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField_SIGN, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                                .addComponent(jTextField1_ZERO)
                                .addComponent(jTextField_AC))
                            .addComponent(jTextField_CARRY, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextField1_FLAG, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextField1_ZERO, jTextField_AC, jTextField_CARRY, jTextField_SIGN, jTextField_parity});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1_FLAG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_CARRY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_SIGN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jTextField1_ZERO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField_AC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField_parity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jList2.setModel(new DefaultListModel());
        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList2ValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jList2);

        jList1.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("New");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Save");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem_quit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_quit.setText("Quit");
        jMenuItem_quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_quitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem_quit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Run");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        jMenuItem3.setText("Compile");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        jMenuItem4.setText("Run");
        jMenu3.add(jMenuItem4);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem6.setText("Run :step by step");
        jMenu3.add(jMenuItem6);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Help");
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(8, 8, 8)))
                                .addGap(51, 51, 51))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jLabel19)
                        .addContainerGap())
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addComponent(jLabel19)
                                .addGap(42, 42, 42))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    DefaultListModel model = new DefaultListModel();

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        compile();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton_INSERTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_INSERTActionPerformed
        // TODO add your handling code here:
        String x = jTextField_MEM_ADRS.getText();
        String y = jTextField_VALUE.getText();
        if (x.length() <= 4 && y.length() <= 2) {
            try {
                Integer decimal_x = Integer.parseInt(x, 16);
                mem_value[decimal_x] = y;
                txt_remarks.append("\nAddress=" + x);
                txt_remarks.append("\nValue=" + y);
                jTextField_MEM_ADRS.setText("");
                jTextField_VALUE.setText("");

            } catch (Exception e) {
                txt_remarks.append("\ninvalid hexadecimal address");
            }
            try {
                Integer decimal_y = Integer.parseInt(y, 16);
            } catch (Exception e) {
                txt_remarks.append("\ninvalid hexadecimal value");
            }
        } else {
            txt_remarks.append("\nValue exceeded limit");
        }
    }//GEN-LAST:event_jButton_INSERTActionPerformed

    private void jButton_EDITActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EDITActionPerformed
        // TODO add your handling code here:
        jTextField_acc.setEditable(true);
        jTextField_b.setEditable(true);
        jTextField_C.setEditable(true);
        jTextField_D.setEditable(true);
        jTextField_E.setEditable(true);
        jTextField_H.setEditable(true);
        jTextField_L.setEditable(true);
        jTextField_SP.setEditable(true);
        jTextField_PC.setEditable(true);
    }//GEN-LAST:event_jButton_EDITActionPerformed

    private void jButton_SAVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_SAVEActionPerformed
        // TODO add your handling code here:
        reg[0] = jTextField_acc.getText();
        reg[1] = jTextField_b.getText();
        reg[2] = jTextField_C.getText();
        reg[3] = jTextField_D.getText();
        reg[4] = jTextField_E.getText();
        reg[5] = jTextField_H.getText();
        reg[6] = jTextField_L.getText();
        flagreg = jTextField1_FLAG.getText();
        store_pc = jTextField_PC.getText();
        store_sp = jTextField_SP.getText();
        jTextField_acc.setEditable(false);
        jTextField_b.setEditable(false);
        jTextField_C.setEditable(false);
        jTextField_D.setEditable(false);
        jTextField_E.setEditable(false);
        jTextField_H.setEditable(false);
        jTextField_L.setEditable(false);
        jTextField_SP.setEditable(false);
        jTextField_PC.setEditable(false);
    }//GEN-LAST:event_jButton_SAVEActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        text_lines= text_lines=txt_workspace.getText().split("\\n");
         JFileChooser SaveAs = new JFileChooser();
        SaveAs.setApproveButtonText("Save");
        int actionDialog = SaveAs.showOpenDialog(this);
        File fileName = new File(SaveAs.getSelectedFile() + ".txt");
        try {
            if (fileName == null) {
                return;
            }
            BufferedWriter outFile = new BufferedWriter(new FileWriter(fileName));

            for (String s : text_lines) {
                outFile.write(s);
                outFile.newLine();
            }
            try {
                Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
                Connection conn = DriverManager.getConnection("jdbc:odbc:ready","sa","savneet123");
                System.out.println("connection ok");
                String query = "insert filenamedata1 values(?,?)";
                PreparedStatement st = conn.prepareCall(query);
                String name = fileName.getName();
                String pathname = fileName.getAbsolutePath();
                st.setString(1, name);
                st.setString(2, pathname);
                int c = st.executeUpdate();
                if (c > 0) {
                    model.addElement(fileName.getName());
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e );
            }
            outFile.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }


    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem_quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_quitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem_quitActionPerformed

    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList2ValueChanged
        // TODO add your handling code here:
         try{
               Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
        Connection conn=DriverManager.getConnection("jdbc:odbc:ready","sa","savneet123");
             String query="select *from filenamedata1 where name=?";
            PreparedStatement st=conn.prepareCall(query);
            String name=(String)jList2.getSelectedValue();
            st.setString(1,name);
            ResultSet rs=st.executeQuery();
          while(rs.next())
            {
               String pathname=rs.getString("pathname");
              String z=pathname.replace('\\','/');
              File f=new File(z);
             JOptionPane.showMessageDialog(this,f);
            FileInputStream fis=new FileInputStream(f);
        BufferedInputStream bis=new BufferedInputStream(fis);
        
        int buffersize=90;
        byte[] buffer=new byte[buffersize];
        int bread;
           
        while((bread=bis.read(buffer, 0, buffersize))!=-1)
        {
            String s=new String(buffer, 0, bread);
             txt_workspace.setText("");
             txt_workspace.setText(s);    
        }
         
           }
            
            }catch(Exception e)
            {
               JOptionPane.showMessageDialog(this,e); 
            }
   
    }//GEN-LAST:event_jList2ValueChanged

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
         txt_workspace.setText("");
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    void intialise_to_zero() {
        for (int i = 0; i < 65536; i++) {
            mem_value[i] = String.valueOf(0);
        }
        for (int j = 0; j < 7; j++) {
            reg[j] = String.valueOf(0);
        }
        carry = 0;
        sign = 0;
        zero = 0;
        ac = 0;
        parity = 0;
        store_sp = "0";
        store_pc = "0";
    }

    void loadlist() {

        model = (DefaultListModel) jList2.getModel();
        try {

            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Connection conn = DriverManager.getConnection("jdbc:odbc:ready","sa","savneet123");
            Statement st = conn.createStatement();

            String query = "select * from filenamedata1";
            ResultSet rs = st.executeQuery(query);
            ResultSetMetaData rst = rs.getMetaData();


            while (rs.next()) {
                String name = rs.getString("name");
                model.addElement(name);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);

        }
    }

    void display() {
        txt_remarks.setText("");
        if (build != 0) {
            txt_remarks.setText("BUILD SUCCESSFUL");
        }
        jTextField_acc.setText(reg[0]);
        jTextField_b.setText(reg[1]);
        jTextField_C.setText(reg[2]);
        jTextField_D.setText(reg[3]);
        jTextField_E.setText(reg[4]);
        jTextField_H.setText(reg[5]);
        jTextField_L.setText(reg[6]);
        jTextField_CARRY.setText(String.valueOf(carry));
        jTextField_SIGN.setText(String.valueOf(sign));
        jTextField_AC.setText(String.valueOf(ac));
        jTextField1_ZERO.setText(String.valueOf(zero));
        jTextField_parity.setText(String.valueOf(parity));
        jTextField_SP.setText(store_sp);
        jTextField_PC.setText(store_pc);

        jTextField1_FLAG.setText(flagreg);
        build++;

    }

    String complement(String a) {
        Integer value = Integer.parseInt(a, 16);
        value = ~value;
        a = Integer.toHexString(value);
        int len = a.length();
        if (len > 2) {
            a = a.substring((len - 2), len);
        }
        return a;
    }

    void flag_carry(String a) {
        if (a.length() > 2) {
            carry = 1;
        } else {
            carry = 0;
        }
    }

    void flag_zero(String a) {
        String value1 = Integer.toBinaryString(Integer.parseInt(a, 16));
        flag1=0;
        if (value1.length() > 8) 
            
        {
            
            
            String v = value1.substring(value1.length() - 8, value1.length());
            for (int i = 0; i < v.length(); i++) {
                if (v.charAt(i) == '1') {
                    
                    flag1 = 1;
                    break;
                }
            }
        } 
        else {
            for (int i = 0; i < value1.length(); i++) {

                if (value1.charAt(i) == '1') {
                   
                    flag1 = 1;
                    break;
                }
            }
        }
          
        if (flag1 == 1) {
            zero = 0;
        } 
        else if(flag1==0) {
            zero = 1;
        }
    }

    void flag_sign(String a) {
        String value1 = Integer.toBinaryString(Integer.parseInt(a, 16));
        if (value1.length() > 8) {
            String v = value1.substring(value1.length() - 8, value1.length());
            if (v.charAt(0) == '1') {
                sign = 1;
            } else {
                sign = 0;
            }
        }
        else if (value1.length() == 8) {
            if (value1.charAt(0) == '1') 
            {
                sign = 1;
            } else {
                sign = 0;
            }
        }
        else {
            sign = 0;
        }
    }

    void flag_parity(String a) {
        String value1 = Integer.toBinaryString(Integer.parseInt(a, 16));
        int len = value1.length();

        int ctr = 0;
        if (value1.length() > 8) {

            String v = value1.substring(len - 8, len);
            for (int i = 0; i < v.length(); i++) {
                if (v.charAt(i) == '1') {
                    ctr++;
                }
            }
        } else {
            for (int i = 0; i < value1.length(); i++) {
                if (value1.charAt(i) == '1') {
                    ctr++;
                }
            }
        }
        if (ctr % 2 == 0) {
            parity = 1;
        } else {
            parity = 0;
        }
    }

    void flag_ac(String a, String b) {
        int sum = Integer.parseInt(a, 16) + Integer.parseInt(b, 16);
        if (sum > 15) {
            ac = 1;
        } else {
            ac = 0;
        }
    }

    void flag_psw() {
        String h = String.valueOf(sign) + String.valueOf(zero) + String.valueOf(0) + String.valueOf(ac) + String.valueOf(0) + String.valueOf(parity) + String.valueOf(0) + String.valueOf(carry);
        int i = Integer.parseInt(h, 2);
        psw = Integer.toHexString(i);
        flagreg = psw;
    }

    int search(char schar[], char sch) {
        int found = 0;
        for (int s = 0; s < schar.length; s++) {
            if (sch == schar[s]) {
                found = 1;
            }
        }
        return found;
    }

    int whichreg(char schar[], char sch) {
        int regfound = 8;
        for (int s = 0; s < 7; s++) {
            if (sch == schar[s]) {
                regfound = s;
            }
        }
        return regfound;
    }

    String change_to_twobits(String a) {
        if (a.length() > 2) {
            int len = a.length();
            a = a.substring(len - 2, len);
        }
        return a;
    }

    void compile() {
         try{
                Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Connection conn=DriverManager.getConnection("jdbc:odbc:ready","sa","savneet123");
             String query="insert cmd values(?)";
            PreparedStatement st=conn.prepareCall(query);
           
             for(String s:text_lines)
            {
                System.out.println(s);
                 st.setString(1,s);
                 int c=st.executeUpdate();
            
            if(c>0)
            {
              cmmd();  
            }
            
            }
           
            }catch(Exception e)
            {
                
            }
           
        
int j;
char ch='0';
///************ split ******************////
   text_lines=txt_workspace.getText().split("\\n");
   l=text_lines.length;
   labels=new String[l];
  exec_flag=new boolean[l] ;
 for(int i=0;i<l;i++)
      {
         exec_flag[i]=true; 
      }
 for(int h=0;h<l;h++)
      {      int le=text_lines[h].length();
for(j=0;j<le;j++)
      {
         ch=text_lines[h].charAt(j) ;
          
         if(ch==':')
         {
             flag=true;
             break;
         }
      }
          if(flag==true)
      {
       labels[h]=text_lines[h].substring(0,j); 
      }
      
      if(flag==false)
           {
       labels[h]="0"; 
      }
       flag=false;}
 
    for(u=0;u<text_lines.length;u++)
    {
        if(label_arg!="")
    {
        System.out.println("label:"+label_arg+"u"+u);
    if(labels[u].equals(label_arg))
    {save2=u;
        for(int g=0;g<l;g++)
        {
            exec_flag[g]=true;} }}
        int st=0,end=0,ctr=0;
instr[0]="";instr[1]="";instr[2]="";
      int len=text_lines[u].length();
      for(j=0;j<len;j++)
      {
         ch=text_lines[u].charAt(j) ; 
         if(ch==':')
         {
             flag=true;
             break;
         }
      }
      if(flag==true)
      {
          st=j+1;
        for(j=st;j<len;j++)
        {ch=text_lines[u].charAt(j) ;
            if((ch==' ')||(ch==','))
        {
     end=j;
     instr[ctr]=text_lines[u].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[u].substring(st,len);

    } } }
      if(flag==false)
      {
          for( j=0;j<len;j++){
    ch=text_lines[u].charAt(j);
    if(ch==' '||ch==','){
     end=j;
     instr[ctr]=text_lines[u].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[u].substring(st,len);
     
     } } }
       flag=false;     

             instruction(instr[0],instr[1],instr[2],exec_flag[u]); 
          //   System.out.println(instr[0]+instr[1]+instr[2]+exec_flag[u]);
        }
    }

    void cmmd()
     {
         DefaultListModel model1=new DefaultListModel();
         model1=(DefaultListModel)jList1.getModel();
         SimpleDateFormat sd=new SimpleDateFormat("dd/MM/yyyy");
         Calendar c1=Calendar.getInstance();
        try{
             
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
        Connection conn=DriverManager.getConnection("jdbc:odbc:ready","sa","savneet123");
           Statement st=conn.createStatement();
        
           String query="select * from cmd";
           ResultSet rs=st.executeQuery(query);
          
          model1.clear();
           while(rs.next())
           {
              String name=rs.getString("commands");
               model1.addElement(name);
               model1.addElement(sd.format(c1.getTime()));
           }
          }
        catch(Exception ex)
        {
           JOptionPane.showMessageDialog(this, ex);
           
        }
     }
    
    void instruction(String s1, String s2, String s3,boolean s4) 
    {//1.MOV
        if (s1.equalsIgnoreCase("MOV")) {
           if(s4==true)
           { int errorcase1 = search(keyword, s2.charAt(0));
            int errorcase2 = search(keyword, s3.charAt(0));
            int destination = whichreg(keyword, s2.charAt(0));
            int source = whichreg(keyword, s3.charAt(0));
            if (errorcase1 == 0 && errorcase2 == 0) {
                txt_remarks.append("\nsyntax error");
            }
            if (errorcase1 == 1 && errorcase2 == 1) {
                if (s2.charAt(0) != 'M' && s3.charAt(0) != 'M') {
                    reg[destination] = reg[source];
                    display();
                } else {
                    memadrs = reg[5] + reg[6];

                    Integer decimal_mem = Integer.parseInt(memadrs, 16);
                    String data = mem_value[decimal_mem];
                    if (s3.charAt(0) == 'M') {
                        reg[destination] = data;
                        display();
                    }
                    if (s2.charAt(0) == 'M') {
                        mem_value[decimal_mem] = reg[source];
                        display();
                        txt_remarks.append("\nAddress=" + memadrs);
                        txt_remarks.append("\nValue=" + mem_value[decimal_mem]);

                    }
                }
                }
            }

        }

        //2.MVI
        if (s1.equalsIgnoreCase("MVI")) {
            if(s4==true)
            {    s3=s3.substring(0,s3.length()-1);
            if (s2.charAt(0) == 'M') {
                memadrs = reg[5] + reg[6];
                Integer decimal_mem = Integer.parseInt(memadrs, 16);
                mem_value[decimal_mem] =s3 ;
                display();
                txt_remarks.append("\nAddress=" + memadrs);
                txt_remarks.append("\nValue=" + mem_value[decimal_mem]);


            } else {
                int errorcase1 = search(keyword, s2.charAt(0));
                int destination = whichreg(keyword, s2.charAt(0));
                if (errorcase1 == 0) {
                    txt_remarks.append("\nsyntax error");
                }
                if (errorcase1 == 1) {
                    if (s3.length() <= 2) {
                        reg[destination] = s3;
                        display();
                    } else {
                        txt_remarks.append("\nvalue exceeded limits");

                    }
                }
                }
                }
            

        }
        ///3.LDA
        if (s1.equalsIgnoreCase("LDA")) {
            if(s4==true)
           {
            if (s2.length() > 4) {
                txt_remarks.append("\nvalue exceeded limits");

            } else {
                try {
                    Integer decimal_mem = Integer.parseInt(s2, 16);
                    reg[0] = mem_value[decimal_mem];
                    display();
                } catch (Exception e) {

                    txt_remarks.append("\nenter valid hexadecimal no");
                }
            }
           }
        }
        ////4.LDAX
        if (s1.equalsIgnoreCase("LDAX")) {
           if(s4==true)
           {
            int errorcase1 = search(keyword, s2.charAt(0));
            int source = whichreg(keyword, s2.charAt(0));
            if (errorcase1 == 0) {
                txt_remarks.append("\nsyntax error");
            } else {
                if (source == 1 || source == 3) {
                    memadrs = reg[source] + reg[source + 1];

                    Integer decimal_mem = Integer.parseInt(memadrs, 16);
                    reg[0] = mem_value[decimal_mem];
                    display();
                } else {
                    txt_remarks.append("\ninvalid register pair");
                }
            }
           }
        }
        ///5.LXI
        if (s1.equalsIgnoreCase("LXI")) {
           if(s4==true)
           {
            int errorcase1 = search(keyword, s2.charAt(0));
            int destination = whichreg(keyword, s2.charAt(0));
             s3=s3.substring(0,s3.length()-1);
            if (errorcase1 == 0) {
                txt_remarks.append("\nsyntax error");
            } else {
                if (destination == 1 || destination == 3 || destination == 5) {
                    if (s3.length() <= 4) {
                        try {
                            Integer decimal_mem = Integer.parseInt(s3, 16);
                            reg[destination] = s3.substring(0, 2);
                            reg[destination + 1] = s3.substring(2, 4);
                            display();
                        } catch (Exception e) {
                            txt_remarks.append("\ninvalid hexadecimal no");
                        }
                    } else {
                        txt_remarks.append("\nvalue exceeded limit");

                    }
                } else {
                    txt_remarks.append("\ninvalid register pair");
                }  }
            }
        }
        ///6.LHLD
        if (s1.equalsIgnoreCase("LHLD")) {
          if(s4==true)
           {
            if (s2.length() <= 4) {
                try {
                    Integer decimal_mem = Integer.parseInt(s2, 16);
                    reg[6] = mem_value[decimal_mem];

                    Integer decimal_mem2 = decimal_mem + 1;
                    reg[5] = mem_value[decimal_mem2];
                    display();
                } catch (Exception e) {
                    txt_remarks.append("\ninvalid hexadecimal no");
                }

            } else {
                txt_remarks.append("\nvalue exceeded limit");
            }
        }
        }
        //7.STA
        if (s1.equalsIgnoreCase("STA")) {
            if(s4==true)
           {
            if (s2.length() > 4) {
                txt_remarks.append("\nvalue exceeded limits");

            } else {
                try {
                    Integer decimal_mem = Integer.parseInt(s2, 16);
                    mem_value[decimal_mem] = reg[0];
                    display();
                    txt_remarks.append("\nAddress=" + s2);
                    txt_remarks.append("\nValue=" + mem_value[decimal_mem]);

                } catch (Exception e) {
                    txt_remarks.append("\nenter valid hexadecimal no");
                }
            }
           }
        }
        ///8.STAX
        if (s1.equalsIgnoreCase("STAX")) {
            if(s4==true)
           {
            int errorcase1 = search(keyword, s2.charAt(0));
            int destination = whichreg(keyword, s2.charAt(0));
            if (errorcase1 == 0) {
                txt_remarks.append("syntax error");
            } else {
                if (destination == 1 || destination == 3) {
                    memadrs = reg[destination] + reg[destination + 1];
                    System.out.println(memadrs);
                    Integer decimal_mem = Integer.parseInt(memadrs, 16);
                    System.out.println(decimal_mem);
                    mem_value[decimal_mem] = reg[0];
                    System.out.println(mem_value[decimal_mem]);
                    display();
                    txt_remarks.append("\nAddress=" + memadrs);
                    txt_remarks.append("\nValue=" + mem_value[decimal_mem]);

                } else {
                    txt_remarks.append("invalid register pair");
                }
            }
           }
        }
        //9.SHLD
        if (s1.equalsIgnoreCase("SHLD")) {
           if(s4==true)
           {
            if (s2.length() <= 4) {
                try {
                    Integer decimal_mem = Integer.parseInt(s2, 16);
                    mem_value[decimal_mem] = reg[6];
                    mem_value[decimal_mem + 1] = reg[5];
                    display();
                    txt_remarks.append("\nAddress=" + s2);
                    txt_remarks.append("  Value=" + mem_value[decimal_mem]);
                    txt_remarks.append("\nAddress=" + Integer.toHexString(decimal_mem + 1));
                    txt_remarks.append("  Value=" + mem_value[decimal_mem + 1]);

                } catch (Exception e) {
                    txt_remarks.append("\ninvalid hexadecimal address");
                }

            } else {
                txt_remarks.append("\naddress exceeded limit");
            }
        }
        }
        //10.XCHG
        if (s1.equalsIgnoreCase("XCHG")) {
           if(s4==true)
           {
            String temp = reg[5];
            reg[5] = reg[3];
            reg[3] = temp;
            temp = reg[4];
            reg[4] = reg[6];
            reg[6] = temp;
            display();
        }
        }
        //11.SPHL
        if (s1.equalsIgnoreCase("SPHL")) {
            if(s4==true)
           {
            store_sp = reg[5] + reg[6];
            display();
        }}
        //12.XTHL
        if (s1.equalsIgnoreCase("XTHL")) {
            if(s4==true)
           {
            try {
                Integer decimal_x = Integer.parseInt(store_sp, 16);
                reg[6] = mem_value[decimal_x];
                reg[5] = mem_value[decimal_x + 1];
                display();


            } catch (Exception e) {
                txt_remarks.append("\nstack pointer contains invalid hexadecimal address");
            }
            display();}
        }
        //13.PCHL
        if (s1.equalsIgnoreCase("PCHL")) {
if(s4==true)
           {
            store_pc = reg[5] + reg[6];
            display();}
        }
        //14.PUSH
        if (s1.equalsIgnoreCase("PUSH")) {
            if(s4==true)
           {
            int errorcase1 = search(keyword, s2.charAt(0));
            int source = whichreg(keyword, s2.charAt(0));
            if (source == 1 || source == 3 || source == 5) {
                try {
                    Integer decimal_x = Integer.parseInt(store_sp, 16);
                    Integer c = decimal_x;

                    mem_value[--decimal_x] = reg[source];

                    mem_value[--decimal_x] = reg[source + 1];
                    reg[source] = "0";
                    reg[source + 1] = "0";
                    store_sp = Integer.toHexString(decimal_x);
                    display();

                    txt_remarks.append("\nAddress=" + Integer.toHexString(--c));
                    txt_remarks.append("  Value=" + mem_value[c]);

                    txt_remarks.append("\nAddress=" + Integer.toHexString(--c));
                    txt_remarks.append("  Value=" + mem_value[c]);
                } catch (Exception e) {
                    txt_remarks.append("\n invalid hexadecimal address");
                }
            } else if (source == 0) {
                try {
                    Integer decimal_x = Integer.parseInt(store_sp, 16);
                    Integer c = decimal_x;

                    mem_value[--decimal_x] = reg[0];

                    mem_value[--decimal_x] = flagreg;
                    reg[source] = "0";
                    flagreg = "0";
                    store_sp = Integer.toHexString(decimal_x);
                    display();

                    txt_remarks.append("\nAddress=" + Integer.toHexString(--c));
                    txt_remarks.append("  Value=" + mem_value[c]);

                    txt_remarks.append("\nAddress=" + Integer.toHexString(--c));
                    txt_remarks.append("  Value=" + mem_value[c]);
                } catch (Exception e) {
                    txt_remarks.append("\n invalid hexadecimal address");
                }
            } else {
                txt_remarks.append("\ninvalid register pair");
            }
        }
        }
        //15.POP
        if (s1.equalsIgnoreCase("POP")) {
            if(s4==true)
           {
            int errorcase1 = search(keyword, s2.charAt(0));
            int source = whichreg(keyword, s2.charAt(0));
            if (source == 1 || source == 3 || source == 5) {
                try {
                    Integer decimal_x = Integer.parseInt(store_sp, 16);
                    Integer c = decimal_x;

                    reg[source + 1] = mem_value[decimal_x++];
                    reg[source] = mem_value[decimal_x++];


                    store_sp = Integer.toHexString(decimal_x);
                    display();
                    mem_value[c] = "0";
                    txt_remarks.append("\nAddress=" + Integer.toHexString(c));
                    txt_remarks.append("  Value=" + mem_value[c++]);
                    mem_value[c] = "0";
                    txt_remarks.append("\nAddress=" + Integer.toHexString(c));
                    txt_remarks.append("  Value=" + mem_value[c++]);
                    mem_value[c++] = "0";
                } catch (Exception e) {
                    txt_remarks.append("\n invalid hexadecimal address");
                }
            } else if (source == 0) {
                try {
                    Integer decimal_x = Integer.parseInt(store_sp, 16);
                    Integer c = decimal_x;

                    flagreg = mem_value[decimal_x++];
                    reg[0] = mem_value[decimal_x++];


                    store_sp = Integer.toHexString(decimal_x);
                    display();
                    mem_value[c] = "0";
                    txt_remarks.append("\nAddress=" + Integer.toHexString(c));
                    txt_remarks.append("  Value=" + mem_value[c++]);
                    mem_value[c] = "0";
                    txt_remarks.append("\nAddress=" + Integer.toHexString(c));
                    txt_remarks.append("  Value=" + mem_value[c++]);
                    mem_value[c++] = "0";
                } catch (Exception e) {
                    txt_remarks.append("\n invalid hexadecimal address");
                }
            } else {
                txt_remarks.append("\ninvalid register pair");
            }
           }
        }
        //16.CMC
        if (s1.equalsIgnoreCase("CMC")) {
           if(s4==true)
           {
            if (carry == 0) {
                carry = 1;
            } else {
                carry = 0;
            }
            flag_psw();
            display();
        }
        }
        //17.STC
        if (s1.equalsIgnoreCase("STC")) {
if(s4==true)
           {
            carry = 1;
            flag_psw();
            display();
        }
        }
        //CMA
        if (s1.equalsIgnoreCase("CMA")) {
if(s4==true)
           {
            Integer value = Integer.parseInt(reg[0], 16);
            value = ~value;
            reg[0] = Integer.toHexString(value);
            int len = reg[0].length();
            if (len > 2) {
                reg[0] = reg[0].substring((len - 2), len);
            }
            display();
        }
        }

        //18.ANA
        if (s1.equalsIgnoreCase("ANA")) {
          if(s4==true)
           {
            int errorcase1 = search(keyword, s2.charAt(0));
            int source = whichreg(keyword, s2.charAt(0));
            if (errorcase1 == 0) {
                txt_remarks.append("\nsyntax error");
            }
            if (errorcase1 == 1) {
                if (s2.charAt(0) == 'M') {

                    String mem_adres = reg[5] + reg[6];
                    Integer decimal_mem = Integer.parseInt(mem_adres, 16);
                    System.out.println(mem_value[decimal_mem]);
                    int opreand_1 = Integer.parseInt(mem_value[decimal_mem], 16);
                    int value = Integer.parseInt(reg[0], 16) & opreand_1;

                    reg[0] = Integer.toHexString(value);
                    carry = 0;
                    ac = 1;
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_psw();
                    display();
                } else {
                    int opreand_1 = Integer.parseInt(reg[source], 16);
                    int value = Integer.parseInt(reg[0], 16) & opreand_1;

                    reg[0] = Integer.toHexString(value);
                    carry = 0;
                    ac = 1;
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_psw();
                    display();
                }
            }
           }


        }
        //19.XRA
        if (s1.equalsIgnoreCase("XRA")) {
            if(s4==true)
           {
            int opreand_1 = 0;

            int errorcase1 = search(keyword, s2.charAt(0));
            int source = whichreg(keyword, s2.charAt(0));
            if (errorcase1 == 0) {
                txt_remarks.append("\nsyntax error");
            }
            if (errorcase1 == 1) {
                if (s2.charAt(0) == 'M') {

                    String mem_adres = reg[5] + reg[6];
                    Integer decimal_mem = Integer.parseInt(mem_adres, 16);
                    opreand_1 = Integer.parseInt(mem_value[decimal_mem], 16);
                    int value = Integer.parseInt(reg[0], 16) ^ opreand_1;

                    reg[0] = Integer.toHexString(value);
                    carry = 0;
                    ac = 0;
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_psw();
                    display();
                } else {


                    opreand_1 = Integer.parseInt(reg[source], 16);
                    int value = Integer.parseInt(reg[0], 16) ^ opreand_1;

                    reg[0] = Integer.toHexString(value);
                    carry = 0;
                    ac = 0;
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_psw();
                    display();
                }
            }
           }

        }
        //20.ORA
        if (s1.equalsIgnoreCase("ORA")) {
            if(s4==true)
           {
            int opreand_1 = 0;
            int errorcase1 = search(keyword, s2.charAt(0));
            int source = whichreg(keyword, s2.charAt(0));
            System.out.println(errorcase1);
            if (errorcase1 == 0) {

                txt_remarks.append("\nsyntax error");
            }
            if (errorcase1 == 1) {
                if (s2.charAt(0) == 'M') {

                    String mem_adres = reg[5] + reg[6];
                    Integer decimal_mem = Integer.parseInt(mem_adres, 16);
                    opreand_1 = Integer.parseInt(mem_value[decimal_mem], 16);
                    int value = Integer.parseInt(reg[0], 16) | opreand_1;
                    reg[0] = Integer.toHexString(value);
                    carry = 0;
                    ac = 0;
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_psw();
                    display();
                } else {


                    opreand_1 = Integer.parseInt(reg[source], 16);
                    int value = Integer.parseInt(reg[0], 16) | opreand_1;
                    reg[0] = Integer.toHexString(value);
                    carry = 0;
                    ac = 0;
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_psw();
                    display();
                }
            }
        }
        }
        //21.ANI
        if (s1.equalsIgnoreCase("ANI")) {
            if(s4==true)
           {
               
           s2=s2.substring(0,s2.length()-1);
            if (s2.length() <= 2) {
                try {
                    int opreand_1 = Integer.parseInt(s2, 16);
                    int value = Integer.parseInt(reg[0], 16) & opreand_1;
                    reg[0] = Integer.toHexString(value);
                    carry = 0;
                    ac = 1;
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_psw();
                    display();
                } catch (Exception e) {
                    txt_remarks.append("\ninvalid hexadecimal data");

                }
            } else {
                txt_remarks.append("\nvalue exceeded 8 bit limit");

            }
           }

        }
        //22.XRI
        if (s1.equalsIgnoreCase("XRI")) {
            if(s4==true)
           {s2=s2.substring(0,s2.length()-1);
            if (s2.length() <= 2) {
                try {
                    int opreand_1 = Integer.parseInt(s2, 16);
                    int value = Integer.parseInt(reg[0], 16) ^ opreand_1;
                    reg[0] = Integer.toHexString(value);
                    carry = 0;
                    ac = 0;
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_psw();
                    display();
                } catch (Exception e) {
                    txt_remarks.append("\ninvalid hexadecimal data");

                }
            } else {
                txt_remarks.append("\nvalue exceeded 8 bit limit");

            }

           }
        }
        //23.ORI
        if (s1.equalsIgnoreCase("ORI")) {
            if(s4==true)
           { s2=s2.substring(0,s2.length()-1);
            int value;
            if (s2.length() <= 2) {
                try {
                    int opreand_1 = Integer.parseInt(s2, 16);
                    value = Integer.parseInt(reg[0], 16) | opreand_1;
                    reg[0] = Integer.toHexString(value);
                    carry = 0;
                    ac = 0;
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_psw();
                    display();
                } catch (Exception e) {
                    txt_remarks.append("\ninvalid hexadecimal data");

                }
            } else {
                txt_remarks.append("\nvalue exceeded 8 bit limit");

            }
           }
        }
        //24.ADD
        if (s1.equalsIgnoreCase("ADD")) {
            if(s4==true)
           {
            int errorcase1 = search(keyword, s2.charAt(0));
            int source = whichreg(keyword, s2.charAt(0));
            if (errorcase1 == 0) {
                txt_remarks.append("\nsyntax error");
            }
            if (errorcase1 == 1) {
                if (s2.charAt(0) == 'M') {
                    String s = reg[0];
                    Integer mem_adrs = Integer.parseInt(reg[5] + reg[6], 16);
                    int value_b = Integer.parseInt(mem_value[mem_adrs], 16);
                    int value_a = Integer.parseInt(reg[0], 16);
                    value_a = value_a + value_b;
                    reg[0] = Integer.toHexString(value_a);
                    flag_carry(reg[0]);
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_ac(s.substring(1), Integer.toHexString(value_b).substring(1));
                    reg[0] = change_to_twobits(reg[0]);
                    flag_psw();
                    display();
                } else {
                    String s = reg[0];
                    int value_b = Integer.parseInt(reg[source], 16);
                    int value_a = Integer.parseInt(reg[0], 16);
                    value_a = value_a + value_b;
                    reg[0] = Integer.toHexString(value_a);
                    flag_carry(reg[0]);
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);

                   // flag_ac(s.substring(1), reg[source].substring(1));
                    reg[0] = change_to_twobits(reg[0]);
                    flag_psw();
                    display();
                }
                }
            }
        }
        //25.ADI
        if (s1.equalsIgnoreCase("ADI")) {
            if(s4==true)
           {s2=s2.substring(0,s2.length());
            if (s2.length() <= 2) {
                try {
                    String s = reg[0];
                    int value_b = Integer.parseInt(s2, 16);
                    int value_a = Integer.parseInt(reg[0], 16);
                    value_a = value_a + value_b;
                    reg[0] = Integer.toHexString(value_a);
                    flag_carry(reg[0]);
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);

                    flag_ac(s.substring(1), s2.substring(1));
                    reg[0] = change_to_twobits(reg[0]);
                    flag_psw();
                    display();
                } catch (Exception e) {
                    txt_remarks.append("\ninvalid hexadecimal data");
                }
            } else {
                txt_remarks.append("\nvalue exceeded limit");
            }
           }
        }
        //26.ADC
        if (s1.equalsIgnoreCase("ADC")) {
            if(s4==true)
           {
            int errorcase1 = search(keyword, s2.charAt(0));
            int source = whichreg(keyword, s2.charAt(0));
            if (errorcase1 == 0) {
                txt_remarks.append("\nsyntax error");
            }
            if (errorcase1 == 1) {
                if (s2.charAt(0) == 'M') {
                    String s = reg[0];
                    Integer mem_adrs = Integer.parseInt(reg[5] + reg[6], 16);
                    int value_b = Integer.parseInt(mem_value[mem_adrs], 16);
                    int value_a = Integer.parseInt(reg[0], 16);
                    value_a = value_a + value_b + carry;
                    reg[0] = Integer.toHexString(value_a);
                    flag_carry(reg[0]);
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_ac(s.substring(1), Integer.toHexString(value_b).substring(1));
                    reg[0] = change_to_twobits(reg[0]);
                    flag_psw();
                    display();
                } else {
                    String s = reg[0];
                    int value_b = Integer.parseInt(reg[source], 16);
                    int value_a = Integer.parseInt(reg[0], 16);
                    value_a = value_a + value_b + carry;
                    reg[0] = Integer.toHexString(value_a);
                    flag_carry(reg[0]);
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);

                    flag_ac(s.substring(1), reg[source].substring(1));
                    reg[0] = change_to_twobits(reg[0]);
                    flag_psw();
                    display();
                }
            }
           }
        }
        //27.ACI
        if (s1.equalsIgnoreCase("ACI")) {
            if(s4==true)
           {s2=s2.substring(0,s2.length()-1);
            if (s2.length() <= 2) {
                try {
                    String s = reg[0];
                    int value_b = Integer.parseInt(s2, 16);
                    int value_a = Integer.parseInt(reg[0], 16);
                    value_a = value_a + value_b + carry;
                    reg[0] = Integer.toHexString(value_a);
                    flag_carry(reg[0]);
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);

                    flag_ac(s.substring(1), s2.substring(1));
                    reg[0] = change_to_twobits(reg[0]);
                    flag_psw();
                    display();
                } catch (Exception e) {
                    txt_remarks.append("\ninvalid hexadecimal data");
                }
            } else {
                txt_remarks.append("\nvalue exceeded limit");
            }
        }
        }

        //28.SUB
        if (s1.equalsIgnoreCase("SUB")) {
            if(s4==true)
           {
            int errorcase1 = search(keyword, s2.charAt(0));
            int source = whichreg(keyword, s2.charAt(0));
            if (errorcase1 == 0) {
                txt_remarks.append("\nsyntax error");
            }
            if (errorcase1 == 1) {
                if (s2.charAt(0) == 'M') {
                    String s = reg[0];
                    Integer mem_adrs = Integer.parseInt(reg[5] + reg[6], 16);
                    String m = mem_value[mem_adrs];
                    String z = complement(m);
                    int value_c = Integer.parseInt(m, 16);
                    int value_b = Integer.parseInt(z, 16) + 1;

                    int value_a = Integer.parseInt(reg[0], 16);
                    if (value_c <= value_a) {
                        carry = 0;
                    } else {
                        carry = 1;
                    }

                    value_a = value_a + value_b;
                    reg[0] = Integer.toHexString(value_a);

                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_ac(s.substring(1), Integer.toHexString(value_b).substring(1));
                    reg[0] = change_to_twobits(reg[0]);
                    flag_psw();
                    display();
                } else {
                    String s = reg[0];
                    int value_c = Integer.parseInt(reg[source], 16);
                    int value_a = Integer.parseInt(reg[0], 16);
                    if (value_c <= value_a) {
                        carry = 0;
                    } else {
                        carry = 1;
                    }
                    String z = complement(reg[source]);
                    int value_b = Integer.parseInt(z, 16) + 1;
                    value_a = value_a + value_b;
                    reg[0] = Integer.toHexString(value_a);
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_ac(s.substring(1), Integer.toHexString(value_b).substring(1));
                    reg[0] = change_to_twobits(reg[0]);
                    flag_psw();
                    display();
                }
            }
           }
        }
        //29.SUI
        if (s1.equalsIgnoreCase("SUI")) {
            if(s4==true)
           {s2=s2.substring(0,s2.length()-1);
            if (s2.length() <= 2) {
                try {
                    String s = reg[0];
                    String z = complement(s2);
                    int value_c = Integer.parseInt(s2, 16);
                    int value_b = Integer.parseInt(z, 16) + 1;
                    int value_a = Integer.parseInt(reg[0], 16);
                    if (value_c <= value_a) {
                        carry = 0;
                    } else {
                        carry = 1;
                    }
                    value_a = value_a + value_b;
                    reg[0] = Integer.toHexString(value_a);

                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);

                    flag_ac(s.substring(1), Integer.toHexString(value_b).substring(1));
                    reg[0] = change_to_twobits(reg[0]);
                    flag_psw();
                    display();
                } catch (Exception e) {
                    txt_remarks.append("\ninvalid hexadecimal data");
                }
            } else {
                txt_remarks.append("\nvalue exceeded limit");
            }
           }
        }
        //30.SBB
        if (s1.equalsIgnoreCase("SBB")) {
            if(s4==true)
           {
            int errorcase1 = search(keyword, s2.charAt(0));
            int source = whichreg(keyword, s2.charAt(0));
            if (errorcase1 == 0) {
                txt_remarks.append("\nsyntax error");
            }
            if (errorcase1 == 1) {
                if (s2.charAt(0) == 'M') {
                    String s = reg[0];
                    Integer mem_adrs = Integer.parseInt(reg[5] + reg[6], 16);
                    String m = mem_value[mem_adrs];
                    int value_c = Integer.parseInt(m, 16);
                    String z = complement(m);
                    int value_b = Integer.parseInt(z, 16) + 1 - carry;

                    int value_a = Integer.parseInt(reg[0], 16);
                    if (value_c <= value_a) {
                        carry = 0;
                    } else {
                        carry = 1;
                    }
                    value_a = value_a + value_b;
                    reg[0] = Integer.toHexString(value_a);

                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_ac(s.substring(1), Integer.toHexString(value_b).substring(1));
                    reg[0] = change_to_twobits(reg[0]);
                    flag_psw();
                    display();
                } else {
                    String s = reg[0];
                    int value_c = Integer.parseInt(reg[source], 16);
                    String z = complement(reg[source]);
                    int value_b = Integer.parseInt(z, 16) + 1 - carry;
                    System.out.println(value_b);
                    int value_a = Integer.parseInt(reg[0], 16);
                    if (value_c <= value_a) {
                        carry = 0;
                    } else {
                        carry = 1;
                    }
                    value_a = value_a + value_b;
                    reg[0] = Integer.toHexString(value_a);

                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);
                    flag_ac(s.substring(1), Integer.toHexString(value_b).substring(1));
                    reg[0] = change_to_twobits(reg[0]);
                    flag_psw();
                    display();
                }
            }
        }
        }
        //31.SBI
        if (s1.equalsIgnoreCase("SBI")) {
            if(s4==true)
           {s2=s2.substring(0,s2.length()-1);
            if (s2.length() <= 2) {
                try {
                    String s = reg[0];
                    String z = complement(s2);
                    int value_c = Integer.parseInt(s2, 16);
                    int value_b = Integer.parseInt(z, 16) + 1 - carry;
                    int value_a = Integer.parseInt(reg[0], 16);
                    if (value_c <= value_a) {
                        carry = 0;
                    } else {
                        carry = 1;
                    }

                    value_a = value_a + value_b;
                    reg[0] = Integer.toHexString(value_a);

                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_zero(reg[0]);

                    flag_ac(s.substring(1), Integer.toHexString(value_b).substring(1));
                    reg[0] = change_to_twobits(reg[0]);
                    flag_psw();
                    display();
                } catch (Exception e) {
                    txt_remarks.append("\ninvalid hexadecimal data");
                }
            } else {
                txt_remarks.append("\nvalue exceeded limit");
            }
           }
        }
        //32.CMP
        if (s1.equalsIgnoreCase("CMP")) {
            if(s4==true)
           {
            String s = reg[0];
            int errorcase1 = search(keyword, s2.charAt(0));

            int source = whichreg(keyword, s2.charAt(0));
            if (errorcase1 == 0) {
                txt_remarks.append("\nsyntax error");
            }
            if (s2.charAt(0) == 'M') {
                Integer mem_adrs = Integer.parseInt(reg[5] + reg[6], 16);
                String m = mem_value[mem_adrs];
                String z = complement(m);
                int value_b = Integer.parseInt(z, 16) + 1;
                int value_m = Integer.parseInt(m, 16);
                int value_a = Integer.parseInt(reg[0], 16);

                if (value_a < value_m) {
                    carry = 1;
                    zero = 0;
                } else if (value_a == value_m) {
                    carry = 0;
                    zero = 1;
                } else {
                    carry = 0;
                    zero = 0;
                }
                value_a = value_a + value_b;
                reg[0] = Integer.toHexString(value_a);
                reg[0] = change_to_twobits(reg[0]);
                flag_sign(reg[0]);
                flag_parity(reg[0]);
                flag_ac(s.substring(1), Integer.toHexString(value_b).substring(1));
                flag_psw();
                display();
                jTextField_acc.setText(s);
            }
            if (errorcase1 == 1) {
                int value_r = Integer.parseInt(reg[source], 16);
                int value_a = Integer.parseInt(reg[0], 16);
                String z = complement(reg[source]);
                int value_b = Integer.parseInt(z, 16) + 1;

                if (value_a < value_r) {

                    carry = 1;
                    zero = 0;
                } else if (value_a == value_r) {
                    carry = 0;
                    zero = 1;
                } else {
                    carry = 0;
                    zero = 0;
                }
                value_a = value_a + value_b;
                reg[0] = Integer.toHexString(value_a);
                reg[0] = change_to_twobits(reg[0]);
                flag_sign(reg[0]);
                flag_parity(reg[0]);
                flag_ac(s.substring(1), Integer.toHexString(value_b).substring(1));
                flag_psw();
                display();
                jTextField_acc.setText(s);
            }
        }
        }
        //33.CPI
        if (s1.equalsIgnoreCase("CPI")) {
            if(s4==true)
           {s2=s2.substring(0,s2.length()-1);
            String s = reg[0];
            if (s2.length() <= 2) {
                try {
                    int value_i = Integer.parseInt(s2, 16);
                    int value_a = Integer.parseInt(reg[0], 16);
                    String z = complement(s2);
                    int value_b = Integer.parseInt(z, 16) + 1;

                    if (value_a < value_i) {
                        carry = 1;
                        zero = 0;
                    } else if (value_a == value_i) {
                        carry = 0;
                        zero = 1;
                    } else {
                        carry = 0;
                        zero = 0;
                    }
                    value_a = value_a + value_b;
                    reg[0] = Integer.toHexString(value_a);
                    reg[0] = change_to_twobits(reg[0]);
                    flag_sign(reg[0]);
                    flag_parity(reg[0]);
                    flag_ac(s.substring(1), Integer.toHexString(value_b).substring(1));
                    flag_psw();
                    display();
                    jTextField_acc.setText(s);
                } catch (Exception e) {
                    txt_remarks.append("\ninvalid hexadecimal no");
                }

            } else {
                txt_remarks.append("\nvalue exceeded limit");
            }
           }
        }
        //34.HLT
        if (s1.equalsIgnoreCase("HLT")) {
            if(s4==true)
           {
              if(l-1>u)
         {for(int y=u+1;y<l;y++)
             {
               exec_flag[y]=false;  
             }} 
           }
        }
        //35.NOP
        if (s1.equalsIgnoreCase("NOP")) {
            if(s4==true)
           {
               
           }
        }
        ///36.DAD
        if (s1.equalsIgnoreCase("DAD")) {
            if(s4==true)
           {
            int errorcase1 = search(keyword, s2.charAt(0));
            boolean errorcase0 = s2.equals("SP");

            int source = whichreg(keyword, s2.charAt(0));
            if (errorcase1 == 0 && errorcase0 == false) {
                txt_remarks.append("\nsyntax error");
            }
            if (s2.equals("SP")) {
                int value_sp = Integer.parseInt(store_sp, 16);
                int value_hl = Integer.parseInt(reg[5] + reg[6], 16);
                int total = value_sp + value_hl;
                String tot = Integer.toHexString(total);
                if (tot.length() > 4) {
                    carry = 1;

                }
                if (tot.length() <= 4) {
                    carry = 0;

                }
                String si = "", so = "";

                if (tot.length() >= 4) {
                    si = tot.substring(tot.length() - 4, tot.length() - 2);
                    so = tot.substring(tot.length() - 2, tot.length());
                } else if (tot.length() == 3) {
                    si = tot.substring(0, tot.length() - 2);
                    so = tot.substring(tot.length() - 2, tot.length());
                } else if (tot.length() == 2) {
                    si = "00";
                    so = tot.substring(tot.length() - 2, tot.length());
                } else if (tot.length() < 2) {
                    si = "00";
                    so = "0" + tot;
                }
                reg[5] = si;
                reg[6] = so;
                flag_psw();
                display();
            }

            if (errorcase1 == 1) {
                if (source == 1 || source == 3 || source == 5) {
                    int value_s = Integer.parseInt(reg[source] + reg[source + 1], 16);
                    int value_hl = Integer.parseInt(reg[5] + reg[6], 16);
                    int total = value_s + value_hl;
                    String tot = Integer.toHexString(total);
                    if (tot.length() > 4) {
                        carry = 1;

                    }
                    if (tot.length() <= 4) {
                        carry = 0;

                    }
                    String si = "", so = "";

                    if (tot.length() >= 4) {
                        si = tot.substring(tot.length() - 4, tot.length() - 2);
                        so = tot.substring(tot.length() - 2, tot.length());
                    } else if (tot.length() == 3) {
                        si = tot.substring(1, 2);
                        so = tot.substring(2, 4);
                    } else if (tot.length() < 2) {
                        si = "00";
                        so = "0" + tot;
                    }
                    reg[5] = si;
                    reg[6] = so;
                    flag_psw();
                    display();
                } else {
                    txt_remarks.append("\nsinvalid register pair");
                }
            }
           }
        }
        //37.RAL
        if (s1.equalsIgnoreCase("RAL")) {
            if(s4==true)
           {
            int value = Integer.parseInt(reg[0], 16);
            String s = Integer.toBinaryString(value);
            String x = Integer.toHexString(carry);
            int len1 = 8 - s.length();
            if (s.length() < 8) {
                for (int i = 1; i <= len1; i++) {
                    s = "0" + s;
                }
            }
            String c = s.substring(0, 1);
            carry = Integer.parseInt(c, 16);

            int value2 = Integer.parseInt(s, 2);
            value2 = value2 << 1;
            String sl = Integer.toBinaryString(value2);
            int len5 = 8 - s1.length();
            if (sl.length() < 8) {
                for (int i = 1; i <= len5; i++) {
                    sl = "0" + sl;
                }
            } else if (sl.length() > 8) {
                sl = sl.substring(sl.length() - 8, sl.length());
            }
            if (value < 128) {
                int r = value2 | Integer.parseInt(x);

                String so = Integer.toBinaryString(r);
                sl = so;
            } else {
                int r = Integer.parseInt(sl, 2) | Integer.parseInt(x);
                System.out.println(r);
                String so = Integer.toBinaryString(r);
                sl = so;
            }
            int len3 = 8 - s1.length();
            if (sl.length() < 8) {
                for (int i = 1; i <= len3; i++) {
                    sl = "0" + sl;
                }
            } else if (sl.length() > 8) {
                sl = sl.substring(sl.length() - 8, sl.length());
            }
            int v = Integer.parseInt(sl, 2);
            String out1 = Integer.toHexString(v);
            reg[0] = out1;
            flag_psw();
            display();
           }
        }
        //38.RLC
        if (s1.equalsIgnoreCase("RLC")) {
            if(s4==true)
           {
            int value = Integer.parseInt(reg[0], 16);

            String s = Integer.toBinaryString(value);
            int len1 = 8 - s.length();
            if (s.length() < 8) {
                for (int i = 1; i <= len1; i++) {
                    s = "0" + s;
                }
            }

            String c = s.substring(0, 1);
            carry = Integer.parseInt(c, 16);

            int value2 = Integer.parseInt(s, 2);
            value2 = value2 << 1;
            String sl = Integer.toBinaryString(value2);
            int len5 = 8 - s1.length();
            if (sl.length() < 8) {
                for (int i = 1; i <= len5; i++) {
                    sl = "0" + sl;
                }
            } else if (sl.length() > 8) {
                sl = sl.substring(sl.length() - 8, sl.length());
            }
            if (value < 128) {
                int r = value2 | Integer.parseInt(c);
                String so = Integer.toBinaryString(r);
                sl = so;
            } else {
                int r = Integer.parseInt(sl, 2) | Integer.parseInt(c);
                String so = Integer.toBinaryString(r);
                sl = so;
            }
            int len3 = 8 - sl.length();
            if (sl.length() < 8) {
                for (int i = 1; i <= len3; i++) {
                    sl = "0" + sl;
                }
            } else if (sl.length() > 8) {
                sl = sl.substring(sl.length() - 8, sl.length());
            }
            int v = Integer.parseInt(sl, 2);
            String out1 = Integer.toHexString(v);
            reg[0] = out1;
            flag_psw();
            display();
           }
        }
        //39.RAR
        if (s1.equalsIgnoreCase("RAR")) {
            if(s4==true)
           {
            int value = Integer.parseInt(reg[0], 16);
            String s = Integer.toBinaryString(value);

            String x = Integer.toHexString(carry);
            int len = 8 - s.length();
            for (int i = 1; i <= len; i++) {
                s = "0" + s;
            }

            String c = s.substring(s.length() - 1);
            carry = Integer.parseInt(c, 16);
            System.out.println(c);
            int value2 = value >> 1;
            int v = Integer.parseInt(x) << 7;
            int r = value2 | v;
            String so = Integer.toBinaryString(r);
            int len4 = 8 - so.length();
            for (int i = 1; i <= len4; i++) {
                so = "0" + so;
            }
            int vx = Integer.parseInt(so, 2);
            String out1 = Integer.toHexString(vx);
            reg[0] = out1;
            flag_psw();
            display();
        }
        }
        //40.RRC
        if (s1.equalsIgnoreCase("RRC")) {
            if(s4==true)
           {
            int value = Integer.parseInt(reg[0], 16);
            String s = Integer.toBinaryString(value);

            int len1 = 8 - s.length();
            for (int i = 1; i <= len1; i++) {
                s = "0" + s;
            }
            String c = s.substring(s.length() - 1);
            carry = Integer.parseInt(c, 16);
            int value2 = value >> 1;
            int r = value2 | Integer.parseInt(c) << 7;

            String so = Integer.toBinaryString(r);
            int len3 = 8 - so.length();

            for (int i = 1; i <= len3; i++) {
                so = "0" + so;
            }

            int v = Integer.parseInt(so, 2);
            String out1 = Integer.toHexString(v);
            reg[0] = out1;
            flag_psw();
            display();
           }
        }
        //41.DCR
        if (s1.equalsIgnoreCase("DCR")) {
            if(s4==true)
           {
            int errorcase = search(keyword, s2.charAt(0));
            int source = whichreg(keyword, s2.charAt(0));
            if (errorcase == 0) {
                txt_remarks.append("\n syntax error");
            }
            if (errorcase == 1) {
                if (s2.charAt(0) == 'M') {
                    try {
                        Integer decimal_x = Integer.parseInt(reg[5] + reg[6], 16);
                        int value = Integer.parseInt(mem_value[decimal_x], 16);
                        if (value == 0) {
                            value = 255;
                        } else {
                            value--;
                        }
                        mem_value[decimal_x] = Integer.toHexString(value);
                        flag_zero(mem_value[decimal_x]);
                        flag_sign(mem_value[decimal_x]);
                        flag_parity(mem_value[decimal_x]);
                        display();
                        txt_remarks.append("\n" + "address" + reg[5] + reg[6]);
                        txt_remarks.append(" value" + mem_value[decimal_x]);
                    } catch (Exception e) {
                        txt_remarks.append("\n invalid hexadecimal address");
                    }
                }
                if (source < 8) {
                    int value = Integer.parseInt(reg[source], 16);
                    if (value == 0) {
                        value = 255;
                    } else {
                        value--;
                    }
                    reg[source] = Integer.toHexString(value);
                    flag_zero(reg[source]);
                    flag_sign(reg[source]);
                    flag_parity(reg[source]);
                    flag_psw();
                    display();
                }
            }
        }
        }
        //42.INR
        if (s1.equalsIgnoreCase("INR")) {
            if(s4==true)
           {
            int errorcase = search(keyword, s2.charAt(0));
            int source = whichreg(keyword, s2.charAt(0));
            if (errorcase == 0) {
                txt_remarks.append("\n syntax error");
            }
            if (errorcase == 1) {
                if (s2.charAt(0) == 'M') {
                    try {
                        Integer decimal_x = Integer.parseInt(reg[5] + reg[6], 16);
                        int value = Integer.parseInt(mem_value[decimal_x], 16);
                        if (value == 255) {
                            value = 0;
                        } else {
                            value++;
                        }
                        mem_value[decimal_x] = Integer.toHexString(value);
                        flag_zero(mem_value[decimal_x]);
                        flag_sign(mem_value[decimal_x]);
                        flag_parity(mem_value[decimal_x]);
                        flag_psw();
                        display();
                        txt_remarks.append("\n" + "address" + reg[5] + reg[6]);
                        txt_remarks.append(" value" + mem_value[decimal_x]);
                    } catch (Exception e) {
                        txt_remarks.append("\n invalid hexadecimal address");
                    }
                }
                if (source < 8) {
                    int value = Integer.parseInt(reg[source], 16);
                    if (value == 255) {
                        value = 0;
                    } else {
                        value++;
                    }
                    reg[source] = Integer.toHexString(value);
                    flag_zero(reg[source]);
                    flag_sign(reg[source]);
                    flag_parity(reg[source]);
                    flag_psw();
                    display();
                }
            }
           }
        }
        //43.INX
        if (s1.equalsIgnoreCase("INX")) {
            if(s4==true)
           {
            int errorcase1 = search(keyword, s2.charAt(0));


            int source = whichreg(keyword, s2.charAt(0));
            System.out.println(s2);
            if (s2.equals("SP") )
                    {
                int value = Integer.parseInt(store_sp, 16);
                System.out.println(value);
                if (value == 65535) {
                    value = 0;
                } else {
                    value++;
                }
                store_sp = Integer.toHexString(value);
                flag_psw();
                display();
            } else if (source < 8) {
                if (errorcase1 == 0) {
                    txt_remarks.append("\nsyntax error");
                }
                if (errorcase1 == 1) {
                    if (source == 1 || source == 3 || source == 5) {
                        int value = Integer.parseInt(reg[source] + reg[source + 1], 16);

                        if (value == 65535) {
                            value = 0;
                        } else {
                            value++;
                        }

                        String s = Integer.toHexString(value);
                        if (s.length() < 4) {
                            for (int i = 0; i < (4 - s.length()); i++) {
                                s = "0" + s;
                            }
                        }


                        reg[source] = s.substring(0, 2);
                        reg[source + 1] = s.substring(2);
                        display();
                    } else {
                        txt_remarks.append("\ninvalid register pair");
                    }
                }
            }
           }
        }
        //44.DCX
        if (s1.equalsIgnoreCase("DCX")) {
            if(s4==true)
           {
            int errorcase1 = search(keyword, s2.charAt(0));


            int source = whichreg(keyword, s2.charAt(0));
            System.out.println(s2);
            if (s2.equals("SP")) {
                int value = Integer.parseInt(store_sp, 16);
                System.out.println(value);
                if (value == 0) {
                    value = 65535;
                } else {
                    value--;
                }
                store_sp = Integer.toHexString(value);
                display();
            } else if (source < 8) {
                if (errorcase1 == 0) {
                    txt_remarks.append("\nsyntax error");
                }
                if (errorcase1 == 1) {
                    if (source == 1 || source == 3 || source == 5) {
                        int value = Integer.parseInt(reg[source] + reg[source + 1], 16);

                        if (value == 0) {
                            value = 65535;
                        } else {
                            value--;
                        }

                        String s = Integer.toHexString(value);
                        if (s.length() < 4) {
                            for (int i = 0; i < (4 - s.length()); i++) {
                                s = "0" + s;
                            }
                        }


                        reg[source] = s.substring(0, 2);
                        reg[source + 1] = s.substring(2);

                        display();
                    } else {
                        txt_remarks.append("\ninvalid register pair");
                    }
                }
            }
           }
        }
        //45.DAA
        if (s1.equalsIgnoreCase("DAA")) {
            if(s4==true)
           {
            String s = reg[0];
            if (s.length() < 2) {
                for (int i = 0; i < 2 - s.length(); i++) {
                    s = "0" + s;
                }
            }

            String lower = s.substring(1);
            String upper = s.substring(0, 1);

            if (((Integer.parseInt(lower, 16)) > 9 || (ac == 1)) && (Integer.parseInt(upper, 16)) < 9) {

                reg[0] = Integer.toHexString(Integer.parseInt(reg[0], 16) + Integer.parseInt("06", 16));
            } else if (((Integer.parseInt(upper, 16)) > 9 || (carry == 1)) && (Integer.parseInt(lower, 16)) < 9) {

                reg[0] = Integer.toHexString(Integer.parseInt(reg[0], 16) + Integer.parseInt("60", 16));
            } else if (((Integer.parseInt(upper, 16)) > 9) && ((Integer.parseInt(lower, 16)) > 9)) {


                int a = (Integer.parseInt(reg[0], 16) + Integer.parseInt("66", 16));

                reg[0] = Integer.toHexString(a);
            }

            flag_carry(reg[0]);
            flag_zero(reg[0]);
            flag_parity(reg[0]);
            flag_sign(reg[0]);
            flag_psw();
            if (reg[0].length() > 2) {
                reg[0] = reg[0].substring(1);
            }
            display();
           }
        }
 ///JMP
        if(s1.equalsIgnoreCase("JMP"))
        {
            if(s4==true)
            {label_arg=s2;
            u=-1;
              
                int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                   System.out.println("exec_flag[k]"+exec_flag[k]+k);
                 k++;
                } }}
        //JC
    if(s1.equalsIgnoreCase("JC"))
        {
            if(s4==true&&carry==1)
            { 
                label_arg=s2;
          u=-1;
            int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                   System.out.println("exec_flag[k]"+exec_flag[k]+k);
                 k++;
                } }
        }
    //JNC
    if(s1.equalsIgnoreCase("JNC"))
        {
            if(s4==true&&carry==0)
            { 
                label_arg=s2;
          u=-1;
            int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                   System.out.println("exec_flag[k]"+exec_flag[k]+k);
                 k++;
                } }
        }
     //JM
    if(s1.equalsIgnoreCase("JM"))
        {
            if(s4==true&&sign==1)
            { 
                label_arg=s2;
          u=-1;
            int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                   System.out.println("exec_flag[k]"+exec_flag[k]+k);
                 k++;
                } }
        }
    //JP
    if(s1.equalsIgnoreCase("JP"))
        {
            if(s4==true&&sign==0)
            { 
                label_arg=s2;
          u=-1;
            int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                   System.out.println("exec_flag[k]"+exec_flag[k]+k);
                 k++;
                } }
        }
     //JZ
    if(s1.equalsIgnoreCase("JZ"))
        {
            if(s4==true&&zero==1)
            { 
                label_arg=s2;
          u=-1;
            int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                   System.out.println("exec_flag[k]"+exec_flag[k]+k);
                 k++;
                } }
        }
    //JNZ
    if(s1.equalsIgnoreCase("JNZ"))
        {
            if(s4==true&&zero==0)
            { 
                label_arg=s2;
          u=-1;
            int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                   System.out.println("exec_flag[k]"+exec_flag[k]+k);
                 k++;
                } }
        }
     //JPE
    if(s1.equalsIgnoreCase("JPE"))
        {
            if(s4==true&&parity==1)
            { 
                label_arg=s2;
          u=-1;
            int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                   System.out.println("exec_flag[k]"+exec_flag[k]+k);
                 k++;
                } }
        }
    //JPO
    if(s1.equalsIgnoreCase("JPO"))
        {
            if(s4==true&&parity==0)
            { 
                label_arg=s2;
          u=-1;
            int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                   System.out.println("exec_flag[k]"+exec_flag[k]+k);
                 k++;
                } }
        }
    
  ///CALL
        if(s1.equalsIgnoreCase("CALL"))
        {
            if(s4==true)
            {save1=u+1;
                label_arg=s2;
            u=-1;
                int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                 k++;
                } }}
        ///CC
        if(s1.equalsIgnoreCase("CC"))
        {
            if(s4==true&&carry==1)
            {save1=u+1;
                label_arg=s2;
            u=-1;
                int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                 k++;
                } }}
        ///CNC
        if(s1.equalsIgnoreCase("CNC"))
        {
            if(s4==true&&carry==0)
            {save1=u+1;
                label_arg=s2;
            u=-1;
                int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                 k++;
                } }}
        ///CM
        if(s1.equalsIgnoreCase("CM"))
        {
            if(s4==true&&sign==1)
            {save1=u+1;
                label_arg=s2;
            u=-1;
                int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                 k++;
                } }}
        ///CP
        if(s1.equalsIgnoreCase("CP"))
        {
            if(s4==true&&sign==0)
            {save1=u+1;
                label_arg=s2;
            u=-1;
                int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                 k++;
                } }}
        ///CZ
        if(s1.equalsIgnoreCase("CZ"))
        {
            if(s4==true&&zero==1)
            {save1=u+1;
                label_arg=s2;
            u=-1;
                int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                 k++;
                } }}
         ///CNZ
        if(s1.equalsIgnoreCase("CNZ"))
        {
            if(s4==true&&zero==0)
            {save1=u+1;
                label_arg=s2;
            u=-1;
                int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                 k++;
                } }}
         ///CPE
        if(s1.equalsIgnoreCase("CPE"))
        {
            if(s4==true&&parity==1)
            {save1=u+1;
                label_arg=s2;
            u=-1;
                int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                 k++;
                } }}
        ///CPO
        if(s1.equalsIgnoreCase("CPO"))
        {
            if(s4==true&&parity==0)
            {save1=u+1;
                label_arg=s2;
            u=-1;
                int k=0;
            while(labels[k].equals(s2)==false)
               {
                   exec_flag[k]=false; 
                 k++;
                } }}
        ////RET
         if(s1.equalsIgnoreCase("RET"))
        {if(s4==true)
        {
           boolean flag=false;
            int j=0;
            char ch='0';
                for(int y=save1;y<save2;y++)
    { int st=0,end=0,ctr=0;
instr[0]="";instr[1]="";instr[2]="";
      int len=text_lines[y].length();
      for(j=0;j<len;j++)
      {
         ch=text_lines[y].charAt(j) ; 
         if(ch==':')
         {
             flag=true;
             break;
         }
      }
      if(flag==true)
      {
          st=j+1;
        for(j=st;j<len;j++)
        {ch=text_lines[y].charAt(j) ;
            if((ch==' ')||(ch==','))
        {
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
      } } }
      if(flag==false)
      {
          for( j=0;j<len;j++){
    ch=text_lines[y].charAt(j);
    if(ch==' '||ch==','){
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
     
      } } }
       flag=false;     
    instruction(instr[0],instr[1],instr[2],exec_flag[y]); 
    }}}
   ////RC
         if(s1.equalsIgnoreCase("RC"))
        {if(s4==true&&carry==1)
        {
           boolean flag=false;
            int j=0;
            char ch='0';
                for(int y=save1;y<save2;y++)
    { int st=0,end=0,ctr=0;
instr[0]="";instr[1]="";instr[2]="";
      int len=text_lines[y].length();
      for(j=0;j<len;j++)
      {
         ch=text_lines[y].charAt(j) ; 
         if(ch==':')
         {
             flag=true;
             break;
         }
      }
      if(flag==true)
      {
          st=j+1;
        for(j=st;j<len;j++)
        {ch=text_lines[y].charAt(j) ;
            if((ch==' ')||(ch==','))
        {
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
      } } }
      if(flag==false)
      {
          for( j=0;j<len;j++){
    ch=text_lines[y].charAt(j);
    if(ch==' '||ch==','){
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
     
      } } }
       flag=false;     
    instruction(instr[0],instr[1],instr[2],exec_flag[y]); 
    }}}
   ////RNC
         if(s1.equalsIgnoreCase("RNC"))
        {if(s4==true&&carry==0)
        {
           boolean flag=false;
            int j=0;
            char ch='0';
                for(int y=save1;y<save2;y++)
    { int st=0,end=0,ctr=0;
instr[0]="";instr[1]="";instr[2]="";
      int len=text_lines[y].length();
      for(j=0;j<len;j++)
      {
         ch=text_lines[y].charAt(j) ; 
         if(ch==':')
         {
             flag=true;
             break;
         }
      }
      if(flag==true)
      {
          st=j+1;
        for(j=st;j<len;j++)
        {ch=text_lines[y].charAt(j) ;
            if((ch==' ')||(ch==','))
        {
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
      } } }
      if(flag==false)
      {
          for( j=0;j<len;j++){
    ch=text_lines[y].charAt(j);
    if(ch==' '||ch==','){
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
     
      } } }
       flag=false;     
    instruction(instr[0],instr[1],instr[2],exec_flag[y]); 
    }}}
  
          ////RZ
         if(s1.equalsIgnoreCase("RZ"))
        {if(s4==true&&zero==1)
        {
           boolean flag=false;
            int j=0;
            char ch='0';
                for(int y=save1;y<save2;y++)
    { int st=0,end=0,ctr=0;
instr[0]="";instr[1]="";instr[2]="";
      int len=text_lines[y].length();
      for(j=0;j<len;j++)
      {
         ch=text_lines[y].charAt(j) ; 
         if(ch==':')
         {
             flag=true;
             break;
         }
      }
      if(flag==true)
      {
          st=j+1;
        for(j=st;j<len;j++)
        {ch=text_lines[y].charAt(j) ;
            if((ch==' ')||(ch==','))
        {
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
      } } }
      if(flag==false)
      {
          for( j=0;j<len;j++){
    ch=text_lines[y].charAt(j);
    if(ch==' '||ch==','){
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
     
     } } }
       flag=false;     
    instruction(instr[0],instr[1],instr[2],exec_flag[y]); 
    }}}
   ////RNZ
         if(s1.equalsIgnoreCase("RNZ"))
        {if(s4==true&&zero==0)
        {
           boolean flag=false;
            int j=0;
            char ch='0';
                for(int y=save1;y<save2;y++)
    { int st=0,end=0,ctr=0;
instr[0]="";instr[1]="";instr[2]="";
      int len=text_lines[y].length();
      for(j=0;j<len;j++)
      {
         ch=text_lines[y].charAt(j) ; 
         if(ch==':')
         {
             flag=true;
             break;
         }
      }
      if(flag==true)
      {
          st=j+1;
        for(j=st;j<len;j++)
        {ch=text_lines[y].charAt(j) ;
            if((ch==' ')||(ch==','))
        {
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
      } } }
      if(flag==false)
      {
          for( j=0;j<len;j++){
    ch=text_lines[y].charAt(j);
    if(ch==' '||ch==','){
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
     
      } } }
       flag=false;     
    instruction(instr[0],instr[1],instr[2],exec_flag[y]); 
    }}}
   ////RM
         if(s1.equalsIgnoreCase("RM"))
        {if(s4==true&&sign==1)
        {
           boolean flag=false;
            int j=0;
            char ch='0';
                for(int y=save1;y<save2;y++)
    { int st=0,end=0,ctr=0;
instr[0]="";instr[1]="";instr[2]="";
      int len=text_lines[y].length();
      for(j=0;j<len;j++)
      {
         ch=text_lines[y].charAt(j) ; 
         if(ch==':')
         {
             flag=true;
             break;
         }
      }
      if(flag==true)
      {
          st=j+1;
        for(j=st;j<len;j++)
        {ch=text_lines[y].charAt(j) ;
            if((ch==' ')||(ch==','))
        {
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
      } } }
      if(flag==false)
      {
          for( j=0;j<len;j++){
    ch=text_lines[y].charAt(j);
    if(ch==' '||ch==','){
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
     
      } } }
       flag=false;     
    instruction(instr[0],instr[1],instr[2],exec_flag[y]); 
    }}}
   ////RP
         if(s1.equalsIgnoreCase("RP"))
        {if(s4==true&&sign==0)
        {
           boolean flag=false;
            int j=0;
            char ch='0';
                for(int y=save1;y<save2;y++)
    { int st=0,end=0,ctr=0;
instr[0]="";instr[1]="";instr[2]="";
      int len=text_lines[y].length();
      for(j=0;j<len;j++)
      {
         ch=text_lines[y].charAt(j) ; 
         if(ch==':')
         {
             flag=true;
             break;
         }
      }
      if(flag==true)
      {
          st=j+1;
        for(j=st;j<len;j++)
        {ch=text_lines[y].charAt(j) ;
            if((ch==' ')||(ch==','))
        {
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
     } } }
      if(flag==false)
      {
          for( j=0;j<len;j++){
    ch=text_lines[y].charAt(j);
    if(ch==' '||ch==','){
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
     
     } } }
       flag=false;     
    instruction(instr[0],instr[1],instr[2],exec_flag[y]); 
    }}}
   ////RPE
         if(s1.equalsIgnoreCase("RPE"))
        {if(s4==true&&parity==1)
        {
           boolean flag=false;
            int j=0;
            char ch='0';
                for(int y=save1;y<save2;y++)
    { int st=0,end=0,ctr=0;
instr[0]="";instr[1]="";instr[2]="";
      int len=text_lines[y].length();
      for(j=0;j<len;j++)
      {
         ch=text_lines[y].charAt(j) ; 
         if(ch==':')
         {
             flag=true;
             break;
         }
      }
      if(flag==true)
      {
          st=j+1;
        for(j=st;j<len;j++)
        {ch=text_lines[y].charAt(j) ;
            if((ch==' ')||(ch==','))
        {
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
      } } }
      if(flag==false)
      {
          for( j=0;j<len;j++){
    ch=text_lines[y].charAt(j);
    if(ch==' '||ch==','){
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
      } } }
       flag=false;     
    instruction(instr[0],instr[1],instr[2],exec_flag[y]); 
    }}}
   ////RPO
         if(s1.equalsIgnoreCase("RPO"))
        {if(s4==true&&parity==0)
        {
           boolean flag=false;
            int j=0;
            char ch='0';
                for(int y=save1;y<save2;y++)
    { int st=0,end=0,ctr=0;
instr[0]="";instr[1]="";instr[2]="";
      int len=text_lines[y].length();
      for(j=0;j<len;j++)
      {
         ch=text_lines[y].charAt(j) ; 
         if(ch==':')
         {
             flag=true;
             break;
         }
      }
      if(flag==true)
      {
          st=j+1;
        for(j=st;j<len;j++)
        {ch=text_lines[y].charAt(j) ;
            if((ch==' ')||(ch==','))
        {
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
     } } }
      if(flag==false)
      {
          for( j=0;j<len;j++){
    ch=text_lines[y].charAt(j);
    if(ch==' '||ch==','){
     end=j;
     instr[ctr]=text_lines[y].substring(st,end);
     ctr++;
     st=j+1;
    }
    if(j==len-1){
     instr[ctr]=text_lines[y].substring(st,len);
     
      } } }
       flag=false;     
    instruction(instr[0],instr[1],instr[2],exec_flag[y]); 
    }}}
   }

    /**
     * @param args the command line arguments
     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(front_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(front_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(front_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(front_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new front_page().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_EDIT;
    private javax.swing.JButton jButton_INSERT;
    private javax.swing.JButton jButton_SAVE;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem_quit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1_FLAG;
    private javax.swing.JTextField jTextField1_ZERO;
    private javax.swing.JTextField jTextField_AC;
    private javax.swing.JTextField jTextField_C;
    private javax.swing.JTextField jTextField_CARRY;
    private javax.swing.JTextField jTextField_D;
    private javax.swing.JTextField jTextField_E;
    private javax.swing.JTextField jTextField_H;
    private javax.swing.JTextField jTextField_L;
    private javax.swing.JTextField jTextField_MEM_ADRS;
    private javax.swing.JTextField jTextField_PC;
    private javax.swing.JTextField jTextField_SIGN;
    private javax.swing.JTextField jTextField_SP;
    private javax.swing.JTextField jTextField_VALUE;
    private javax.swing.JTextField jTextField_acc;
    private javax.swing.JTextField jTextField_b;
    private javax.swing.JTextField jTextField_parity;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextArea txt_remarks;
    private javax.swing.JTextArea txt_workspace;
    // End of variables declaration//GEN-END:variables
}
